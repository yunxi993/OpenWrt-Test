#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build-ARMv8

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: lede/feeds.conf.default
  CONFIG_FILE: lede/Build-armv8.config
  DIY_P1_SH: lede/diy-part1.sh
  DIY_P2_SH: lede/diy-arm.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* moby* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16

    - name: Compile the firmware
      id: compile
      run: |
        echo -e "$(nproc) thread compile"
        (cd openwrt && make -j$(nproc) || make -j1 || make -j1 V=s)
        echo "{status}={success}" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y-%m-%d %H%M")" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%m%d-%H%M%S")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Prepare artifact
      run: |
        mkdir -p $GITHUB_WORKSPACE/openwrt/bin/firmware
        mkdir -p $GITHUB_WORKSPACE/openwrt/bin/package
        rm -rf $(find $GITHUB_WORKSPACE/openwrt/bin/targets/ -name "packages" -o -name "*.buildinfo" -o -name "sha256sums" -o -name "*.manifest")
        cp -rf $(find $GITHUB_WORKSPACE/openwrt/bin/targets/ -type f) $GITHUB_WORKSPACE/openwrt/bin/firmware/
        cp -rf $(find $GITHUB_WORKSPACE/openwrt/bin/packages/ -type f -name "*.ipk") $GITHUB_WORKSPACE/openwrt/bin/package/
        cd $GITHUB_WORKSPACE/openwrt/bin/package
        tar -zcvf IPK.tar.gz *
        mv -f IPK.tar.gz ../

    - name: Deliver package
      uses: actions/upload-artifact@v3
      with:
        name: IPK ${{ env.FILE_DATE }}
        path: ./openwrt/bin/package/

    - name: Deliver firmware
      uses: actions/upload-artifact@v3
      with:
        name: firmware ${{ env.FILE_DATE }}
        path: ./openwrt/bin/firmware/

#    - name: Organize files
#      id: organize
#      run: |
#        cd openwrt
#        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
#        echo "::set-output name=status::success"

    - name: Package Armvirt as OpenWrt
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_AUTO_LATEST:  true
        KERNEL_VERSION_NAME: 6.1.4_5.15.86
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WHOAMI: Sil
        ENABLE_WIFI_K504: 0
        ENABLE_WIFI_K510: 0
        SW_FLOWOFFLOAD: 1
        HW_FLOWOFFLOAD: 0
        SFE_FLOW: 0

    - name: copy update files
      run: |
        PACKIT_DIR=/opt/openwrt_packit
        OPENWRT_BIN_DIR=$GITHUB_WORKSPACE/openwrt/bin
        cp ${PACKIT_DIR}/files/update-amlogic-openwrt.sh ${PACKIT_DIR}/output/
        rm -f ${PACKIT_DIR}/output/sha256sums ${PACKIT_DIR}/output/*.gz.sha
        cp $OPENWRT_BIN_DIR/IPK.tar.gz ${PACKIT_DIR}/output/

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: OpenWrt-ARMv8 ${{ env.DATE }}
        tag: ${{ env.TAG_DATE }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * 自用固件，插件根据个人需要删减.
          * 默认IP: 192.168.1.11
          * 默认密码: password

    - name: Telegram notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ steps.tag.outputs.release_tag }}😀😀😀Self use编译完成啦😀😀😀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
